//prehandling of data for arbitrary 4 number

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class VinegreWithoutKey {

    public static void main(String[] args){
        
        Scanner scan = new Scanner(System.in);
        System.out.println("input cipher length");
        String inputString = scan.nextLine();
        System.out.println("input key");
        int inputKeyLength = scan.nextInt();
        scan.close();

        //split string into char array
        char[] inputCharArr = inputString.toCharArray();

        //initialise 4 new arrays
        List<Character> pos1 = new ArrayList<>();
        List<Character> pos2 = new ArrayList<>();
        List<Character> pos3 = new ArrayList<>();
        List<Character> pos4 = new ArrayList<>();
       
        //depending on position depending on i % keylegnth seperate into 4 different arrays
        //pos0,pos1,pos2,pos3
        int counter = 1;
        for(int i = 0; i < inputCharArr.length; i++) {
            int keyChar =  counter % inputKeyLength;
            //pos1
            if (keyChar==1) {
                pos1.add(inputCharArr[i]); 
            } else if (keyChar==2){
                pos2.add(inputCharArr[i]);
            } else if (keyChar==3){
                pos3.add(inputCharArr[i]);
            } else if (keyChar==0){
                pos4.add(inputCharArr[i]);
            }
            counter++;
            if (counter>4) {
                counter=1;    
            }
        }

        // getting most popular letter in each position 
        System.out.println(mostCommonChar(pos1));
        System.out.println(mostCommonChar(pos2));
        System.out.println(mostCommonChar(pos3));
        System.out.println(mostCommonChar(pos4));   
}
    public static char mostCommonChar(List<Character> pos1) {
        // Create a HashMap to store character counts
        Map<Character, Integer> charCount = new HashMap<>();

        // Count occurrences of each character
        for (char c : pos1) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }

        // Find the character with the highest count
        char mostCommon = '\0'; // Initialize with null character
        int maxCount = 0;
        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
            if (entry.getValue() > maxCount) {
                mostCommon = entry.getKey();
                maxCount = entry.getValue();
            }
        }

        return mostCommon;
    }
}
